// Code generated by MockGen. DO NOT EDIT.
// Source: ../auth.go

// Package mocks is a generated GoMock package.
package mocks

import (
	rest "coding-challenge/pkg/rest"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTokenDb is a mock of TokenDb interface.
type MockTokenDb struct {
	ctrl     *gomock.Controller
	recorder *MockTokenDbMockRecorder
}

// MockTokenDbMockRecorder is the mock recorder for MockTokenDb.
type MockTokenDbMockRecorder struct {
	mock *MockTokenDb
}

// NewMockTokenDb creates a new mock instance.
func NewMockTokenDb(ctrl *gomock.Controller) *MockTokenDb {
	mock := &MockTokenDb{ctrl: ctrl}
	mock.recorder = &MockTokenDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenDb) EXPECT() *MockTokenDbMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTokenDb) Close(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", ctx)
}

// Close indicates an expected call of Close.
func (mr *MockTokenDbMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTokenDb)(nil).Close), ctx)
}

// VerifyToken mocks base method.
func (m *MockTokenDb) VerifyToken(ctx context.Context, token string) (rest.SessionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", ctx, token)
	ret0, _ := ret[0].(rest.SessionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockTokenDbMockRecorder) VerifyToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockTokenDb)(nil).VerifyToken), ctx, token)
}
