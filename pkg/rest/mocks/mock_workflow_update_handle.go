// Code generated by MockGen. DO NOT EDIT.
// Source: go.temporal.io/sdk/client (interfaces: WorkflowUpdateHandle)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWorkflowUpdateHandle is a mock of WorkflowUpdateHandle interface.
type MockWorkflowUpdateHandle struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowUpdateHandleMockRecorder
}

// MockWorkflowUpdateHandleMockRecorder is the mock recorder for MockWorkflowUpdateHandle.
type MockWorkflowUpdateHandleMockRecorder struct {
	mock *MockWorkflowUpdateHandle
}

// NewMockWorkflowUpdateHandle creates a new mock instance.
func NewMockWorkflowUpdateHandle(ctrl *gomock.Controller) *MockWorkflowUpdateHandle {
	mock := &MockWorkflowUpdateHandle{ctrl: ctrl}
	mock.recorder = &MockWorkflowUpdateHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowUpdateHandle) EXPECT() *MockWorkflowUpdateHandleMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockWorkflowUpdateHandle) Get(arg0 context.Context, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockWorkflowUpdateHandleMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWorkflowUpdateHandle)(nil).Get), arg0, arg1)
}

// RunID mocks base method.
func (m *MockWorkflowUpdateHandle) RunID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunID")
	ret0, _ := ret[0].(string)
	return ret0
}

// RunID indicates an expected call of RunID.
func (mr *MockWorkflowUpdateHandleMockRecorder) RunID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunID", reflect.TypeOf((*MockWorkflowUpdateHandle)(nil).RunID))
}

// UpdateID mocks base method.
func (m *MockWorkflowUpdateHandle) UpdateID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateID")
	ret0, _ := ret[0].(string)
	return ret0
}

// UpdateID indicates an expected call of UpdateID.
func (mr *MockWorkflowUpdateHandleMockRecorder) UpdateID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateID", reflect.TypeOf((*MockWorkflowUpdateHandle)(nil).UpdateID))
}

// WorkflowID mocks base method.
func (m *MockWorkflowUpdateHandle) WorkflowID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowID")
	ret0, _ := ret[0].(string)
	return ret0
}

// WorkflowID indicates an expected call of WorkflowID.
func (mr *MockWorkflowUpdateHandleMockRecorder) WorkflowID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowID", reflect.TypeOf((*MockWorkflowUpdateHandle)(nil).WorkflowID))
}
