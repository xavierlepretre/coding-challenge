// Code generated by MockGen. DO NOT EDIT.
// Source: ../../db/database.go

// Package mocks is a generated GoMock package.
package mocks

import (
	db "coding-challenge/pkg/db"
	model "coding-challenge/pkg/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBillDatabase is a mock of BillDatabase interface.
type MockBillDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockBillDatabaseMockRecorder
}

// MockBillDatabaseMockRecorder is the mock recorder for MockBillDatabase.
type MockBillDatabaseMockRecorder struct {
	mock *MockBillDatabase
}

// NewMockBillDatabase creates a new mock instance.
func NewMockBillDatabase(ctrl *gomock.Controller) *MockBillDatabase {
	mock := &MockBillDatabase{ctrl: ctrl}
	mock.recorder = &MockBillDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillDatabase) EXPECT() *MockBillDatabaseMockRecorder {
	return m.recorder
}

// AddLineItem mocks base method.
func (m *MockBillDatabase) AddLineItem(lineItem model.BillLineItem, totalBefore model.TotalAmount) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLineItem", lineItem, totalBefore)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLineItem indicates an expected call of AddLineItem.
func (mr *MockBillDatabaseMockRecorder) AddLineItem(lineItem, totalBefore interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLineItem", reflect.TypeOf((*MockBillDatabase)(nil).AddLineItem), lineItem, totalBefore)
}

// CloseBill mocks base method.
func (m *MockBillDatabase) CloseBill(billId model.BillId) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseBill", billId)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseBill indicates an expected call of CloseBill.
func (mr *MockBillDatabaseMockRecorder) CloseBill(billId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseBill", reflect.TypeOf((*MockBillDatabase)(nil).CloseBill), billId)
}

// CreateBill mocks base method.
func (m *MockBillDatabase) CreateBill(bill model.BillInfo) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBill", bill)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBill indicates an expected call of CreateBill.
func (mr *MockBillDatabaseMockRecorder) CreateBill(bill interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBill", reflect.TypeOf((*MockBillDatabase)(nil).CreateBill), bill)
}

// GetBill mocks base method.
func (m *MockBillDatabase) GetBill(billId model.BillId) (db.BillInfoAndMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBill", billId)
	ret0, _ := ret[0].(db.BillInfoAndMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBill indicates an expected call of GetBill.
func (mr *MockBillDatabaseMockRecorder) GetBill(billId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBill", reflect.TypeOf((*MockBillDatabase)(nil).GetBill), billId)
}
